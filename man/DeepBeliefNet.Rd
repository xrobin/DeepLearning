% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbn.R
\name{DeepBeliefNet}
\alias{DeepBeliefNet}
\title{Initialize a Deep Belief Net}
\usage{
DeepBeliefNet(layers, ..., initialize = c("0", "uniform"))
}
\arguments{
\item{layers}{a single \code{\link{Layer}} object or a list of layers as returned by \code{\link{Layers}}}

\item{...}{same as \code{layers}}

\item{initialize}{whether to initialize weights and biases with 0 or random uniform values}
}
\value{
an object of class \code{DeepBeliefNet} containing the following elements:
\itemize{
\item{layers: }{The layers of the RBM}
\item{rbms: }{a list of \code{\link{RestrictedBolzmannMachine}} objects making up the network.}
\item{pretrained, unrolled, finetuned: }{boolean switches to mark the state of the network.}
}
}
\description{
Creates a Deep Belief Net (DBN), precisely a \code{DeepBeliefNet} object, with the given specifications. 
It consists of a stack of \code{\link{RestrictedBolzmannMachine}} layers that will be created according to the specifications.
}
\section{Copying/Cloning}{

#' For performance purposes, the weights are stored in an environment. This means that when you copy the DeepBeliefNet with an assignment, you do not copy the weights
and any modification you make to the new object will be propagated to the original one, and reciprocally.
Use \code{\link{clone}} to control this and make a copy of the weights whenever you need it. Note that all the functions defined in the package do this by default.
}

\examples{
dbn <- DeepBeliefNet(Layers(c(784, 1000, 500, 250, 30), input="continuous", output="gaussian"))
# Identical as
dbn2 <- DeepBeliefNet(Layer(784, "continuous"), Layer(1000, "binary"), Layer(500, "binary"), 
                      Layer(250, "binary"), Layer(30, "gaussian"))
print(dbn)
methods(class="DeepBeliefNet")
}
\seealso{
\code{\link{RestrictedBolzmannMachine}}, \code{\link{Layer}}
}
