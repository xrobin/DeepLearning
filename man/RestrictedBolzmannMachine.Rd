% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rbm.R
\name{RestrictedBolzmannMachine}
\alias{RestrictedBolzmannMachine}
\title{Initialize a Restricted Bolzman Machine}
\usage{
RestrictedBolzmannMachine(input, output, weights = NULL,
  initialize = c("0", "uniform"))
}
\arguments{
\item{input, output}{\code{\link{Layer}} objects}

\item{weights}{optional starting weights. If \code{NULL}, weights will be initialized to 0}

\item{initialize}{whether to initialize weights and biases with 0 or random uniform values. Ignored if \code{weights} are provided.}
}
\value{
an object of class \code{RestrictedBolzmannMachine} containing the following elements:
\itemize{
\item{input,output}{\code{\link{Layer}}s}
\item{weights, weights.breaks}{as input}
\item{pretrained}{boolean switch to mark the state of the layer. \code{FALSE} just after initialization.}
}
}
\description{
Creates a Restricted Bolzman Machine (RBM), precisely a \code{RestrictedBolzmannMachine} object, with the given specifications. 
It is typically stacked in a \code{\link{DeepBeliefNet}}.
}
\section{Copying/Cloning}{

For performance purposes, the weights are stored in an environment. This means that when you copy the RestrictedBolzmannMachine with an assignment, you do not copy the weights
and any modification you make to the new object will be propagated to the original one, and reciprocally.
Use \code{\link{clone}} to control this and make a copy of the weights whenever you need it. Note that all the functions defined in the package do this by default.
}

\examples{
rbm <- RestrictedBolzmannMachine(Layer(784, "continuous"), Layer(1000, "binary"))
print(rbm)
methods(class="RestrictedBolzmannMachine")
}
\seealso{
\code{\link{DeepBeliefNet}}, which makes use of RestrictedBolzmannMachine objects, \code{\link{Layer}}.
}
