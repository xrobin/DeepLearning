% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/c.R
\name{c}
\alias{c}
\alias{c.DeepBeliefNet}
\alias{c.RestrictedBolzmannMachine,}
\alias{c.Layers}
\title{Combine DeepBeliefNets, RestrictedBolzmannMachines and Layers into a DeepBeliefNet.}
\usage{
\method{c}{DeepBeliefNet}(..., biases.first = TRUE)
}
\arguments{
\item{...}{objects to be combined}

\item{biases.first}{whether to use the biases of RBM i (TRUE) or i+1 (FALSE) for shared layers. Defaults to TRUE as we don't care much about the Bs after the pre-training.}
}
\value{
the combined DBN. Note that it is not tagged as unrolled and fine-tuned any more. It is tagged as pre-trained if all individual DBNs/RBMs were pre-trained.
}
\description{
This function combines one or more DeepBeliefNets, RestrictedBolzmannMachines and Layers into a single DeepBeliefNets.

The layers must be compatible in order, i.e. the output of the previous DBN/RBM must be the same (both in term of size and type) than the input of the next one.
The only exception is with \code{\link{Layer}} objects, where \code{\link{RestrictedBolzmannMachine}}s will be created before and after the layer 
(only one \code{\link{RestrictedBolzmannMachine}} is created \code{\link{Layer}} succeeding immediately an other \code{\link{Layer}}).
}
\examples{
# DeepBeliefNets only
dbn1 <- DeepBeliefNet(Layers(c(784, 1000), input="continuous", output="binary"))
dbn2 <- DeepBeliefNet(Layers(c(1000, 500, 250), input="binary", output="binary"))
dbn <- c(dbn1, dbn2)

# RestrictedBolzmannMachines only
dbn <- c(dbn1[[1]], dbn2[[1]], dbn2[[2]])

# Layers only
dbn <- c(Layer(784, "continuous"), Layer(1000, "binary"), Layer(500, "gaussian"))

# Layers only
c(Layer(784, "continuous"), Layer(1000, "binary"), Layer(500, "binary"))

# Mixing it all
rbm3 <- RestrictedBolzmannMachine(Layer(250, "binary"), Layer(30, "binary"))
layer4 <- Layer(2, "gaussian")
c(Layer(2, "gaussian"), dbn1, dbn2, rbm3, layer4)

# The following won't work
\dontrun{
dbn3 <- DeepBeliefNet(Layers(c(250, 500), input="binary", output="binary"))
dbn <- c(dbn1, dbn3)
dbn4 <- DeepBeliefNet(Layers(c(1000, 500), input="continuous", output="binary"))
dbn <- c(dbn1, dbn4)
}
}
