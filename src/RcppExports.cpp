// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/DeepLearning.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// unrollDbnCpp
DeepLearning::DeepBeliefNet unrollDbnCpp(DeepLearning::DeepBeliefNet& aDBN);
RcppExport SEXP _DeepLearning_unrollDbnCpp(SEXP aDBNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DeepLearning::DeepBeliefNet& >::type aDBN(aDBNSEXP);
    rcpp_result_gen = Rcpp::wrap(unrollDbnCpp(aDBN));
    return rcpp_result_gen;
END_RCPP
}
// predictRbmCpp
Eigen::MatrixXd predictRbmCpp(const DeepLearning::RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_predictRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(predictRbmCpp(anRBM, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// predictDbnCpp
Eigen::MatrixXd predictDbnCpp(const DeepLearning::DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_predictDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::DeepBeliefNet& >::type aDBN(aDBNSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(predictDbnCpp(aDBN, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// sampleRbmCpp
Eigen::MatrixXd sampleRbmCpp(const DeepLearning::RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_sampleRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleRbmCpp(anRBM, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// sampleDbnCpp
Eigen::MatrixXd sampleDbnCpp(const DeepLearning::DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_sampleDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::DeepBeliefNet& >::type aDBN(aDBNSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleDbnCpp(aDBN, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// reconstructRbmCpp
Eigen::MatrixXd reconstructRbmCpp(const DeepLearning::RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_reconstructRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstructRbmCpp(anRBM, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// reconstructDbnCpp
Eigen::MatrixXd reconstructDbnCpp(const DeepLearning::DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_reconstructDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::DeepBeliefNet& >::type aDBN(aDBNSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstructDbnCpp(aDBN, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// pretrainRbmCpp
DeepLearning::RBM pretrainRbmCpp(DeepLearning::RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix, const DeepLearning::PretrainParameters& params, const std::unique_ptr<DeepLearning::PretrainProgress>& diag, const DeepLearning::ContinueFunction& cont);
RcppExport SEXP _DeepLearning_pretrainRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP, SEXP paramsSEXP, SEXP diagSEXP, SEXP contSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    Rcpp::traits::input_parameter< const DeepLearning::PretrainParameters& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::unique_ptr<DeepLearning::PretrainProgress>& >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< const DeepLearning::ContinueFunction& >::type cont(contSEXP);
    rcpp_result_gen = Rcpp::wrap(pretrainRbmCpp(anRBM, aDataMatrix, params, diag, cont));
    return rcpp_result_gen;
END_RCPP
}
// pretrainDbnCpp
DeepLearning::DeepBeliefNet pretrainDbnCpp(DeepLearning::DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix, const std::vector<DeepLearning::PretrainParameters>& params, const std::unique_ptr<DeepLearning::PretrainProgress>& diag, DeepLearning::ContinueFunction& cont, const Rcpp::IntegerVector& aSkip);
RcppExport SEXP _DeepLearning_pretrainDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP, SEXP paramsSEXP, SEXP diagSEXP, SEXP contSEXP, SEXP aSkipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DeepLearning::DeepBeliefNet& >::type aDBN(aDBNSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    Rcpp::traits::input_parameter< const std::vector<DeepLearning::PretrainParameters>& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::unique_ptr<DeepLearning::PretrainProgress>& >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< DeepLearning::ContinueFunction& >::type cont(contSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type aSkip(aSkipSEXP);
    rcpp_result_gen = Rcpp::wrap(pretrainDbnCpp(aDBN, aDataMatrix, params, diag, cont, aSkip));
    return rcpp_result_gen;
END_RCPP
}
// trainDbnCpp
DeepLearning::DeepBeliefNet trainDbnCpp(DeepLearning::DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix, const DeepLearning::TrainParameters& trainParams, const std::unique_ptr<DeepLearning::TrainProgress>& diag, const DeepLearning::ContinueFunction& cont);
RcppExport SEXP _DeepLearning_trainDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP, SEXP trainParamsSEXP, SEXP diagSEXP, SEXP contSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DeepLearning::DeepBeliefNet& >::type aDBN(aDBNSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    Rcpp::traits::input_parameter< const DeepLearning::TrainParameters& >::type trainParams(trainParamsSEXP);
    Rcpp::traits::input_parameter< const std::unique_ptr<DeepLearning::TrainProgress>& >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< const DeepLearning::ContinueFunction& >::type cont(contSEXP);
    rcpp_result_gen = Rcpp::wrap(trainDbnCpp(aDBN, aDataMatrix, trainParams, diag, cont));
    return rcpp_result_gen;
END_RCPP
}
// reverseRbmCpp
DeepLearning::RBM reverseRbmCpp(DeepLearning::RBM& anRBM);
RcppExport SEXP _DeepLearning_reverseRbmCpp(SEXP anRBMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    rcpp_result_gen = Rcpp::wrap(reverseRbmCpp(anRBM));
    return rcpp_result_gen;
END_RCPP
}
// reverseDbnCpp
DeepLearning::DeepBeliefNet reverseDbnCpp(DeepLearning::DeepBeliefNet& aDBN);
RcppExport SEXP _DeepLearning_reverseDbnCpp(SEXP aDBNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DeepLearning::DeepBeliefNet& >::type aDBN(aDBNSEXP);
    rcpp_result_gen = Rcpp::wrap(reverseDbnCpp(aDBN));
    return rcpp_result_gen;
END_RCPP
}
// energyRbmCpp
DeepLearning::ArrayX1d energyRbmCpp(const DeepLearning::RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_energyRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(energyRbmCpp(anRBM, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// energyDbnCpp
DeepLearning::ArrayX1d energyDbnCpp(const DeepLearning::DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_energyDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::DeepBeliefNet& >::type aDBN(aDBNSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(energyDbnCpp(aDBN, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// errorRbmCpp
DeepLearning::ArrayX1d errorRbmCpp(const DeepLearning::RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_errorRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(errorRbmCpp(anRBM, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// errorDbnCpp
DeepLearning::ArrayX1d errorDbnCpp(const DeepLearning::DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_errorDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::DeepBeliefNet& >::type aDBN(aDBNSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(errorDbnCpp(aDBN, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// errorSumRbmCpp
double errorSumRbmCpp(const DeepLearning::RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_errorSumRbmCpp(SEXP anRBMSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(errorSumRbmCpp(anRBM, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// errorSumDbnCpp
double errorSumDbnCpp(const DeepLearning::DeepBeliefNet& aDBN, const Eigen::Map<Eigen::MatrixXd>& aDataMatrix);
RcppExport SEXP _DeepLearning_errorSumDbnCpp(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::DeepBeliefNet& >::type aDBN(aDBNSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(errorSumDbnCpp(aDBN, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}
// extractRbmWCpp
DeepLearning::MatrixXdMap extractRbmWCpp(const DeepLearning::RBM& anRBM);
RcppExport SEXP _DeepLearning_extractRbmWCpp(SEXP anRBMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    rcpp_result_gen = Rcpp::wrap(extractRbmWCpp(anRBM));
    return rcpp_result_gen;
END_RCPP
}
// extractRbmCCpp
DeepLearning::ArrayX1d extractRbmCCpp(const DeepLearning::RBM& anRBM);
RcppExport SEXP _DeepLearning_extractRbmCCpp(SEXP anRBMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    rcpp_result_gen = Rcpp::wrap(extractRbmCCpp(anRBM));
    return rcpp_result_gen;
END_RCPP
}
// extractRbmBCpp
DeepLearning::ArrayX1d extractRbmBCpp(const DeepLearning::RBM& anRBM);
RcppExport SEXP _DeepLearning_extractRbmBCpp(SEXP anRBMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    rcpp_result_gen = Rcpp::wrap(extractRbmBCpp(anRBM));
    return rcpp_result_gen;
END_RCPP
}
// setRbmWCpp
DeepLearning::RBM& setRbmWCpp(DeepLearning::RBM& anRBM, const Eigen::Map<Eigen::MatrixXd>& aNewW);
RcppExport SEXP _DeepLearning_setRbmWCpp(SEXP anRBMSEXP, SEXP aNewWSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type aNewW(aNewWSEXP);
    rcpp_result_gen = Rcpp::wrap(setRbmWCpp(anRBM, aNewW));
    return rcpp_result_gen;
END_RCPP
}
// setRbmCCpp
DeepLearning::RBM& setRbmCCpp(DeepLearning::RBM& anRBM, const DeepLearning::ArrayX1d& aNewC);
RcppExport SEXP _DeepLearning_setRbmCCpp(SEXP anRBMSEXP, SEXP aNewCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    Rcpp::traits::input_parameter< const DeepLearning::ArrayX1d& >::type aNewC(aNewCSEXP);
    rcpp_result_gen = Rcpp::wrap(setRbmCCpp(anRBM, aNewC));
    return rcpp_result_gen;
END_RCPP
}
// setRbmBCpp
DeepLearning::RBM& setRbmBCpp(DeepLearning::RBM& anRBM, const DeepLearning::ArrayX1d& aNewB);
RcppExport SEXP _DeepLearning_setRbmBCpp(SEXP anRBMSEXP, SEXP aNewBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DeepLearning::RBM& >::type anRBM(anRBMSEXP);
    Rcpp::traits::input_parameter< const DeepLearning::ArrayX1d& >::type aNewB(aNewBSEXP);
    rcpp_result_gen = Rcpp::wrap(setRbmBCpp(anRBM, aNewB));
    return rcpp_result_gen;
END_RCPP
}
// detectCores
unsigned int detectCores();
RcppExport SEXP _DeepLearning_detectCores() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(detectCores());
    return rcpp_result_gen;
END_RCPP
}
// unit_DbnGradient
SEXP unit_DbnGradient(SEXP& aDBN, SEXP& aDataMatrix);
RcppExport SEXP _DeepLearning_unit_DbnGradient(SEXP aDBNSEXP, SEXP aDataMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type aDBN(aDBNSEXP);
    Rcpp::traits::input_parameter< SEXP& >::type aDataMatrix(aDataMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(unit_DbnGradient(aDBN, aDataMatrix));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP DeepLearning_unrollDbnCpp(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_DeepLearning_unrollDbnCpp", (DL_FUNC) &_DeepLearning_unrollDbnCpp, 1},
    {"_DeepLearning_predictRbmCpp", (DL_FUNC) &_DeepLearning_predictRbmCpp, 2},
    {"_DeepLearning_predictDbnCpp", (DL_FUNC) &_DeepLearning_predictDbnCpp, 2},
    {"_DeepLearning_sampleRbmCpp", (DL_FUNC) &_DeepLearning_sampleRbmCpp, 2},
    {"_DeepLearning_sampleDbnCpp", (DL_FUNC) &_DeepLearning_sampleDbnCpp, 2},
    {"_DeepLearning_reconstructRbmCpp", (DL_FUNC) &_DeepLearning_reconstructRbmCpp, 2},
    {"_DeepLearning_reconstructDbnCpp", (DL_FUNC) &_DeepLearning_reconstructDbnCpp, 2},
    {"_DeepLearning_pretrainRbmCpp", (DL_FUNC) &_DeepLearning_pretrainRbmCpp, 5},
    {"_DeepLearning_pretrainDbnCpp", (DL_FUNC) &_DeepLearning_pretrainDbnCpp, 6},
    {"_DeepLearning_trainDbnCpp", (DL_FUNC) &_DeepLearning_trainDbnCpp, 5},
    {"_DeepLearning_reverseRbmCpp", (DL_FUNC) &_DeepLearning_reverseRbmCpp, 1},
    {"_DeepLearning_reverseDbnCpp", (DL_FUNC) &_DeepLearning_reverseDbnCpp, 1},
    {"_DeepLearning_energyRbmCpp", (DL_FUNC) &_DeepLearning_energyRbmCpp, 2},
    {"_DeepLearning_energyDbnCpp", (DL_FUNC) &_DeepLearning_energyDbnCpp, 2},
    {"_DeepLearning_errorRbmCpp", (DL_FUNC) &_DeepLearning_errorRbmCpp, 2},
    {"_DeepLearning_errorDbnCpp", (DL_FUNC) &_DeepLearning_errorDbnCpp, 2},
    {"_DeepLearning_errorSumRbmCpp", (DL_FUNC) &_DeepLearning_errorSumRbmCpp, 2},
    {"_DeepLearning_errorSumDbnCpp", (DL_FUNC) &_DeepLearning_errorSumDbnCpp, 2},
    {"_DeepLearning_extractRbmWCpp", (DL_FUNC) &_DeepLearning_extractRbmWCpp, 1},
    {"_DeepLearning_extractRbmCCpp", (DL_FUNC) &_DeepLearning_extractRbmCCpp, 1},
    {"_DeepLearning_extractRbmBCpp", (DL_FUNC) &_DeepLearning_extractRbmBCpp, 1},
    {"_DeepLearning_setRbmWCpp", (DL_FUNC) &_DeepLearning_setRbmWCpp, 2},
    {"_DeepLearning_setRbmCCpp", (DL_FUNC) &_DeepLearning_setRbmCCpp, 2},
    {"_DeepLearning_setRbmBCpp", (DL_FUNC) &_DeepLearning_setRbmBCpp, 2},
    {"_DeepLearning_detectCores", (DL_FUNC) &_DeepLearning_detectCores, 0},
    {"_DeepLearning_unit_DbnGradient", (DL_FUNC) &_DeepLearning_unit_DbnGradient, 2},
    {"DeepLearning_unrollDbnCpp", (DL_FUNC) &DeepLearning_unrollDbnCpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_DeepLearning(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
